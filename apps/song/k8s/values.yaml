redis:
  cluster:
    enabled: false
  fullnameOverride: melo-redis
  networkPolicy:
    enabled: false
  master:
    persistence:
      enabled: false
  metrics:
    enabled: false
  podDisruptionBudget:
    enabled: false
  tls:
    enabled: false
  securityContext:
    enabled: false
  sentinel:
    enabled: false
  slave:
    persistence:
      enabled: false
  sysctlImage:
    enabled: false
  volumePermissions:
    enabled: false
  usePassword: false

elasticsearch:
  coordinating:
    replicas: 0
    securityContext:
      enabled: false
  curator:
    enabled: false
    rbac:
      enabled: false
  data:
    persistence:
      enabled: false
    securityContext:
      enabled: false
    replicas: 0
  fullnameOverride: melo-elasticsearch
  global:
    kibanaEnabled: false
  ingest:
    enabled: false
    replicas: 0
    securityContext:
      enabled: false
  master:
    persistence:
      enabled: false
    securityContext:
      enabled: false
    replicas: 1
  metrics:
    enabled: false
    serviceMonitor:
      enabled: false
  sysctlImage:
    enabled: false
  volumePermissions:
    enabled: false

mysql:
  db:
    password: "testpassword"
    name: "meloapp"
  fullnameOverride: melo-mysql
  initdbScripts:
    my_init_script.sh: |
      #!/bin/sh
      cat << EOF
      mysql -u root -ptestpassword -D meloapp -e \
      "CREATE TABLE CACHE (
        id INT NOT NULL,
        date DATETIME NOT NULL,
        name VARCHAR(512) NOT NULL,
        result VARCHAR(512) NOT NULL,
        PRIMARY KEY (id)
      );
      INSERT INTO CACHE (
        id,
        date,
        name,
        result
      ) VALUES (
        '1',
        '2020-07-18 11:14:14',
        'top-day',
        '[{id:312871,title:"MooMeshki",type:"song",duration:167,dl_count:100,artist_id:24958,unique_name:"Garsha-Rezaei-Moo-Meshki",full_name:"GarshaRezaei",artist_available:1,artist_slugs:"garsha-rezaei",album:"MooMeshkiSingle",album_id:null,track:0,count:34099}]'
      );
      INSERT INTO CACHE (
        id,
        date,
        name,
        result
      ) VALUES (
        '2',
        '2020-07-18 11:15:14',
        'top-week',
        '[{id:312890,title:"BiMarefat(FtMrKiarash)",type:"song",duration:163,dl_count:100,artist_id:208394,unique_name:"Behzad-Leito-Poobon-Bi-Marefat-(Ft-Mr-Kiarash)",full_name:"BehzadLeito&Poobon",artist_available:1,artist_slugs:"behzad-leito-poobon",album:"BiMarefatSingle",album_id:null,track:0,count:20227}]'
      );
      CREATE TABLE SITE (
        song_id INT NOT NULL,
        created_at DATETIME NOT NULL,
        PRIMARY KEY (song_id)
      );
      INSERT INTO SITE (
        song_id,
        created_at
      ) VALUES (
        '1',
        '2020-07-18 11:14:14'
      );
      INSERT INTO SITE (
        song_id,
        created_at
      ) VALUES (
        '2',
        '2020-07-18 11:15:14'
      );
      INSERT INTO SITE (
        song_id,
        created_at
      ) VALUES (
        '3',
        '2020-07-18 11:16:14'
      );"
      EOF
  master:
    persistence:
      enabled: false
    replication:
      enabled: false
    securityContext:
      enabled: false
  metrics:
    enabled: false
    serviceMonitor:
      enabled: false
  replication:
    enabled: false
  root:
    password: "testpassword"
  slave:
    persistence:
      enabled: false
    securityContext:
      enabled: false
    replicas: 1
  volumePermissions:
    enabled: false

replicaCount: 1

image:
  repository: melo_song
  pullPolicy: IfNotPresent
  # tag: ""

imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""

serviceAccount:
  create: true
  annotations: {}
  name: ""

podAnnotations: {}

podSecurityContext: {}
  # fsGroup: 2000

securityContext: {}
  # capabilities:
  #   drop:
  #     - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

service:
  type: ClusterIP
  port: 8080

ingress:
  enabled: false
  annotations: {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  hosts:
    - host: localhost
      paths:
        - "/"
  tls: []
    # - secretName: chart-example-tls
    #   hosts:
    #     - chart-example.local

resources: {}
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 100
  targetCPUUtilizationPercentage: 80
  # targetMemoryUtilizationPercentage: 80

nodeSelector: {}

tolerations: []

affinity: {}

configmap:
  volumeMounts:
    mountPath: /app/.env
    subPath: .env
